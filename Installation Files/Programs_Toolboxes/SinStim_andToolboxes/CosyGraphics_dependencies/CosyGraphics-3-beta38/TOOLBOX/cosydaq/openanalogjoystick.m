function [ai,dio] = openanalogjoystick(AdaptorName,BoardName,AIChannels,JoystickCalib,MaxDurationSec,ButtonLines)
% OPENANALOGJOYSTICK  Initialize daq board for an analog joystick.
%    [AI,DIO] = OPENANALOGJOYSTICK(AdaptorName,BoardName,AIChannels,JoystickCalib,MaxDurationSec <,ButtonLines>)
%    
%    Input:
%       AdaptorName    - The name of the daq adaptor. See below for the list of supported adaptors.
%       BoardName      - Leave it empty. Only usefull if you have more than one board of the same vendor.
%       AIChannels     - Channels numbers. On a daq board channels are numbered from 0 (AI0),
%                        on 'winsound', available channels are 1 and 2.
%       JoystickCalib  - Structure coming from JOYSTICKCALIBRATION, see. If no calib, leave it empty.   
%       MaxDurationSec - This is CRITICAL !!! It's the recording duration, in seconds. It will also
%                        serve to optimize the size of the block of samples if the acquisition buffer. 
%                        All calls to peekdata() (accessing recorded data on-line) will have a variable 
%                        latency of up to half this parameter in milliseconds !!! Example, 20 sec of
%                        max record duration gives you a variable latency of 0 to 10 msec when accessing
%                        data during your experiment ! (If you don't need to access data on-line, you
%                        don't need to worry. Just put any high value.)
%                        If MaxDurationSec = Inf, recording is continuous, but the latency becomes 
%                        totaly unpredictable.
%       ButtonLines    - [optional] Numbers of digital lines wired to buttons, if any.
%
%    Output:
%       AI             - Analog Input object (Daq Toolbox object). This object is global, you can 
%                        access it from anywhere with "global AI".
%
%    Example 1: Joystick is on an National Instrument board (any model), x channel is on AI0, y on AI1,
%               we already have run JOYSTICKCALIBRATION to get joystick's calibration values, recording 
%               duration is limited to 20 seconds:
%
%       JoystickCalib.X.SensorRange = [-1.248 3.485]; % (Line automatically generated by JOYSTICKCALIBRATION) 
%       JoystickCalib.Y.SensorRange = [-1.390 3.508]; % (Line automatically generated by JOYSTICKCALIBRATION) 
%
%       openanalogjoystick('nidaq', '', 0:1, JoystickCalib, 20); 
%
%    Example 2: Id. with two buttons, wired on P0.0 and P0.1:
% 
%       openanalogjoystick('nidaq', '', 0:1, JoystickCalib, 20, 0:1); 
%
% See also: CALIBANALOGJOYSTICK, STARTTRIAL, GETJOYSTICK, STOPTRIAL, CLOSEANALOGINPUT, OPENANALOGINPUT, OPENDIGITALIO.
%
% Ben.J., Oct 2012.

global COSY_DAQ

%% Param
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if isfinite(MaxDurationSec)
    SampleRate = 1000; % 1kHz should be good for every case.
else % Continuous recording..
    % As we cannot control the BufferingConfig (Matlab chooses buffer size of 32 or 256 samples, 
    % apparently randomly), we'll use a higher sample rate to minimize latency.
    SampleRate = 5000; % Max sample rate of a NI USB-6008 is 5000. 
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Input Args
if ~exist('ButtonLines','var'),  ButtonLines = [];  end

%% Init AI
dispinfo(mfilename,'info','Initializing Analog Input for X, Y joystick co-ordinates...')
disp(' ')
ai = openanaloginput(AdaptorName, BoardName, AIChannels, SampleRate, MaxDurationSec);

%% Calib AI
S = [ ...
    '       +1 ^         '; ...
    '          |         '; ...
    '          |         '; ...
    '          |         '; ...
    ' <--------+-------->'; ...
    '-1        |       +1'; ...
    '          |         '; ...
    '          |         '; ...
    '       -1 v         '; ...
    ];
S = [repmat(' ',size(S,1),25) S];

if ~isempty(JoystickCalib)
    dispinfo(mfilename,'info','Joystick calibrated. Units are normalized: range goes from -1 to +1.')
    disp(' ')
    disp(S)
    disp(' ')
    ch = ai.Channel;
    ch(1).SensorRange = JoystickCalib.X.SensorRange;
    ch(2).SensorRange = JoystickCalib.Y.SensorRange;
    ch(1).UnitsRange = [-1 1];
    ch(2).UnitsRange = [-1 1];
end

%% Init Digital Input for Buttons
if ~isempty(ButtonLines)
    dispinfo(mfilename,'info','Initializing Digital Input for joystick´s buttons...')
    disp(' ')
    dio = opendigitalio('nidaq', '', 0:1, []);
end
COSY_DAQ.Joystick.ButtonsInverted = JoystickCalib.ButtonsInverted; % (in case of no buttons, it's 0)
